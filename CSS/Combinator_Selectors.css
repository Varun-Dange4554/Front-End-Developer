@namespace svgNamespace url('http://www.w3.org/2000/svg');
@namespace htmlNameSpace url('http://www.w3.org/1999/xhtml');

*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}
body,
html{
    width: 100%;
    height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;

}
/* combinator selector */

/* 
! child-combinator the child (>) is placed between two css selector it maches only those elements mached by the second delector that are the direct childern of element of elements mached by the first.
   */
   .combinator > h1{
    color: red;
   }

   /* 
   # Decendent combinatorr typically represented by a single space ("  ")character - cobines two selectors such that element matched by the second selector are selected if they have an ancestor (parent, parent's parent,parent, parent's parent's parent ,etc.)element macthing the first selector. selectors that utills a descendant combinator are called descendant selectors.
   
   */
   li{
    list-style-type: disc;
   }
   li li {
    list-style-type: circle;
   }


/*    
   & THe subsequent-sibling combinator (~, a tilde ) separates two maches all instance of the second element that follow the first element (not necessarily immediately) and share the same parent element 

   span{
    border: 2px solid red;
   }
   div{
    border: 2px solid red;
      
   }
   span,
   div{
    border: 2px solid red;

   }
   :is(span,div){
    border: 2px solid red;
    
} */
p ~ span {
    color: blue;
}
/* 
The next-sibling combinator (+) separates two selectors and match the second element only if it immediately follow the first element, and both are children of the parent element . */

li:first-of-type + li {
    color: purple;
    font-weight: bold;
}
p > b + i {
    color: gold;
    background-color: black;
}
/* 
nameSpace:- this is useful when dealing with document containing multiple namespace such as HTML with inline SVG or MathML, or XML that mixes multiple vocabularies.
 */


 /* All '<a>' s in the default namespace, in this case,all '<a>' s */

 a{
    font-size: 1.4rem;
 }
 /* no namespace */
 |a{
    text-decoration: wavy overline lime;
    font-weight: bold;
 }
 /* all namespace (including no namespace) */
 *|a{
    color: red;
    fill: red;
    font-style: italic;

 }
 /* only the svgNameSpace namespace, which is <svg> content */

 svgNameSpace|a{
    color: green;
    fill: green;
 }

 /* 
 The htmlNameSpace namespace, which is the html document */
 htmlNameSpace|a {
    text-decoration-line: line-through;
 }
/*
 & nesting selector start
 
 The CSS & nesting explicitly starts the relectionship betwwen parent and child rules when using CSS nesting It makes the nested child rule selectors relative to the parent element.without the & nesting selector the child rule delectors the child rule selects child element. the child rule selectors have the same specificity weight as if they were within :is().
 */
 .example {
    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
    font-size: 1.2rem;
    & > a {
        color: tomato;
        &:hover,
        &:focus{
            color: ivory;
            background-color: tomato;
        }
    }
 }